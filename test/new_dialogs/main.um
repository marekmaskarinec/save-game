import (
  "window.um"
  "rect.um"
  "th.um"
  "canvas.um"
  "input.um"
  th_font = "font.um"
)

type Wrapping = struct {
  position: real
  boundary: real
  lastSize: real // FIXME: lastSize is kind of meh way to solve ressetting previous elements to new line
}

fn (w: ^Wrapping) wrap(): bool {
  if w.position > w.boundary {
    w.position = w.lastSize
    return true
  }

  return false
}

fn (w: ^Wrapping) push(size: real) {
  w.position += size
  w.lastSize = size
}

fn join(strl: []str): str {
  result := ""
  for i, s in strl {
    result += s
  }
  return result
}

// inserts string `sub` at the end of every string in array except for last
fn intersperse(strl: []str, sub: str): []str {
  newl := copy(strl)

  for i := 0; i < len(newl)-1; i++ {
    newl[i] += sub
  }

  return newl
}

fn textSplitBy*(text: str, by: char): []str {
  items := []str{}
  last := 0
  for i, c in text {
    if c == by {
      items = append(items, slice(text, last, i))
      last = i+1 // Skip the character by adding one.
    }
  }
  items = append(items, slice(text, last))
  return items
}

fn pushText(w: ^Wrapping, font: th_font.Font, text: str) {
  w.push(font.measure(text).x)
}

fn wrapTextLine(font: th_font.Font, text: str, boundary: real): []str {
  words := textSplitBy(text, ' ')
  lines := []str{}
  wrapper := Wrapping{position: 0, boundary: boundary}
  line := ""

  for i, word in words {
    pushText(&wrapper, font, word)
    if i != 0 && wrapper.wrap() {
      lines = append(lines, line)
      line = ""
    }
    pushText(&wrapper, font, " ")
    line += word+" "
  }
  lines = append(lines, line)

  return lines
}

fn wrapText(font: th_font.Font, text: str, boundary: real): []str {
  lines := textSplitBy(text, '\n')
  resultLines := []str{}

  for i, line in lines {
    resultLines = append(resultLines, wrapTextLine(font, line, boundary))
  }

  return resultLines
}

fn main() {
  window.setup("New dialogs", 800, 600) 
  
  font := th_font.load("data/font/monospace.ttf", 16)
  screen := rect.mk(0, 0, 800, 600)
  boundary := 100.0
  sampleText := "Lorem ipsum dolor sit amet. Hello world! Now this is a story all about how my life got turned upside down." 

  for window.cycle(screen) {
    boundary = input.getMousePos().x
    text := join(intersperse(wrapText(font, sampleText, boundary), "\n"))

    font.draw(text, th.Vf2{0, 0}, th.black)

    canvas.drawLine(th.red, th.Vf2{boundary, 0}, th.Vf2{boundary, font.measure(text).y}, 1)
  }
}