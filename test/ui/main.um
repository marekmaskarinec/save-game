import (
  "std.um"; "window.um"; "rect.um"; "canvas.um"; "image.um"
  ui = "../../src/d_ui.um"; font = "../../src/d_font.um"
)

type (
  TestResources = struct {
    testImage: image.Image
  }

  TestDataLayout = struct {
    show: bool
    layout: int // id of the layout picked, 0 = fixed row, 1 = dynamic row, 2 = columns
    elementsPerRow: int // elements per row (for fixed layout)
    count: int // counter for the elements on screen
  }

  TestData = struct {
    td_layout: TestDataLayout
  }
)

// Layout name from id as in layout field from TestDataLayout
fn layoutName(layout: int): str {
  name := "Unknown layout"
  switch layout {
    case 0: name = "Fixed row"
    case 1: name = "Dynamic row"
    case 2: name = "Columns"
  }

  return name
}

fn putLayoutTest(t: ^TestDataLayout, r: ^TestResources) {
  if !t.show {
    return
  }

  if ui.beginWindow("Controller", rect.Rect{250, 80, 200, 300}) {
    ui.putLabel("Add or remove items to the")
    ui.putLabel("Controlled window")
    name := layoutName(t.layout)

    if (ui.putButton(name).released) {
      t.layout = (t.layout + 1) % 3
    }
    ui.beginFixedRow(3)
      if (ui.putButton("Remove").released) {
        t.count -= 1;
      }
      if t.count < 0 {
        t.count = 0
      }
      ui.putLabel(std.itoa(t.count))
      if (ui.putButton("Add").released) {
        t.count += 1;
      }

      if t.layout == 0 {
        if (ui.putButton("Decrease").released) {
          t.elementsPerRow -= 1;
        }
        if t.elementsPerRow <= 0 {
          t.elementsPerRow = 1
        }
        ui.putLabel(std.itoa(t.elementsPerRow))
        if (ui.putButton("Increase").released) {
          t.elementsPerRow += 1;
        }
      }
    ui.endFixedRow()
  }

  if ui.beginWindow("Controlled", rect.Rect{480, 80, 230, 350}) {
    switch t.layout {
      case 0: ui.beginFixedRow(t.elementsPerRow)
      case 1: ui.beginDynamicRow()
      case 2: ui.beginColumn()
    }
      for i := 0; i < t.count; i++ {
        ui.putImage(r.testImage)
        ui.putButton(std.itoa(i+1))
      }
    switch t.layout {
      case 0: ui.endFixedRow()
      case 1: ui.endDynamicRow()
      case 2: ui.endColumn()
    }
  }
}

fn putShowHideButton(what: str, toggle: ^bool) {
  pressed := false
  if toggle^ {
    pressed = ui.putButton("Hide "+what).released
  } else {
    pressed = ui.putButton("Show "+what).released
  }

  if pressed {
    toggle ^= !(toggle^);
  }
}

fn putTest(t: ^TestData, r: ^TestResources) {
  putLayoutTest(&t.td_layout, r)
  if ui.beginWindow("Test Window", rect.Rect{(window.w-250)/2, (window.h-400)/2, 250, 400}) {
    ui.putLabel("Hello folks!")
    putShowHideButton("layout test", &t.td_layout.show)
  }
}

fn main() {
  window.setup("Ahoy", 800, 600)

  ui.init(font.loadFont("data/font_sans.ttf", 16))

  testData := TestData{}
  testResources := TestResources{testImage: image.load("data/ui00_img_test.png")}

  var screen: rect.Rect
  for (window.cycle(screen)) {
    screen.w = window.w
    screen.h = window.h

    canvas.drawRect(0xDD9988FF, screen)
    ui.begin()

    putTest(&testData, &testResources)
    
    ui.end()
  }
}
