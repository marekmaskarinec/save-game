import (
        "std.um"; "th.um"; "font.um"; "rect.um"; "input.um"; "canvas.um"; "utf8.um"
)

fn posTrans*(x, y: th.fu): th.Transform {
        return th.Transform{p: th.Vf2{x, y}, s: th.Vf2{1, 1}}
}

fn isMouseInRect*(r: rect.Rect): bool {
        p := input.getMousePos()
        return p.x >= r.x && p.y >= r.y && p.x <= (r.x+r.w) && p.y <= (r.y+r.h)
}

fn readFileStr*(path: str): str {
        file := std.fopen(path, "r")
        if file == null {
                error("Failed to open file")
        }
        std.fseek(file, 0, std.seekEnd)
        datasiz := std.ftell(file)
        std.fseek(file, 0, std.seekBegin)
        buffer := make([]uint8, datasiz)
        std.fread(file, buffer)
        data := ""
        
        for b in buffer {
                data += char(b)
        }
        
        return data
}

fn drawRectLines*(color: uint32, r: rect.Rect) {
        // top
        canvas.drawRect(color, rect.Rect{r.x, r.y, r.w, 1})
        // bottom
        canvas.drawRect(color, rect.Rect{r.x, r.y+r.h-1, r.w, 1})
        // left
        canvas.drawRect(color, rect.Rect{r.x, r.y+1, 1, r.h-1})
        // right
        canvas.drawRect(color, rect.Rect{r.x+r.w-1, r.y+1, 1, r.h-1})
}

fn floor*(n: real): int {
        return trunc(n-int(n < 0 && real(trunc(n)) != n))
}

fn ceil*(n: real): int {
        f := floor(n)
        return f+int(n>f)
}

fn rectChopRight*(r: ^rect.Rect, by: int): rect.Rect {
        r.w -= by
        return rect.Rect{r.x+r.w, r.y, by, r.h}
}
