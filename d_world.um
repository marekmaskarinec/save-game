//      d_world.um
//      
//      The world is split up into layers, which contain chunks.
//      There's 3 layers:
//              -1: the background layer, no collision checks are performed on it
//               0: the middleground layer, this is where the collisions are tested
//               1: the foreground layer, this is drawn over the character, no collision checks  

import (
        "image.um"; "map.um"; "th.um"; "std.um"; "csv.um"; "rect.um"
        "d_util.um"; "d_background.um"
)

const (
        chunkW* = 320/16*2
        chunkH* = 240/16*2
        lastVersion* = "000"
)

type (
        Chunk* = [chunkW][chunkH]int
        ChunkPos* = struct {
                x: int
                y: int
        }
        World* = struct {
                playerSpawnPos: th.Vf2
                tileset: image.Image
                tilemap: [3]map.Map
        }
        Tangent* = struct {
                x, y: int
                id: int
        }
)

fn pos2Tile*(x, y: int): int {
        return y * 4 + x + 1
}

fn tile2Pos*(pos: int): th.Vf2 {
        pos -= 1
        return th.Vf2{pos%4, pos/4}
}

fn (world: ^World) setTile*(layer, tx, ty, tile: int) {
        layer++
        if layer < 0 || layer > 2 {
                return
        }

        // get or construct a chunk
        chunk_pos := ChunkPos{d_util.floor(tx/real(chunkW)), d_util.floor(ty/real(chunkH))}
        chunk := ^Chunk(world.tilemap[layer].get(chunk_pos))
        if chunk == null {
                chunk = new(Chunk)
                world.tilemap[layer].set(chunk_pos, chunk)
        }

        // make tile positions local
        tx = tx - chunk_pos.x * chunkW
        ty = ty - chunk_pos.y * chunkH

        chunk[tx][ty] = tile
}

fn (world: ^World) getTile(layer, tx, ty: int): int {
        layer++
        if layer < 0 || layer > 2 {
                return 0
        }

        // get or construct a chunk
        chunk_pos := ChunkPos{d_util.floor(tx/real(chunkW)), d_util.floor(ty/real(chunkH))}
        chunk := ^Chunk(world.tilemap[layer].get(chunk_pos))
        if chunk == null {
                return 0
        }

        // make tile positions local
        tx = tx - chunk_pos.x * chunkW
        ty = ty - chunk_pos.y * chunkH

        return chunk[tx][ty]
}


//
// getTangentTiles(
//      r: Rectangle to find tangent tiles around
// ): List of tangents, position of tile and it's id.
//
// NOTE: This function only checks middleground layer (layer 0)
//
fn (world: ^World) getTangentTiles(r: rect.Rect): []Tangent {
        x, y, w, h := d_util.floor(r.x/32), d_util.floor(r.y/32), d_util.ceil(r.w/32), d_util.ceil(r.h/32)
        x2, y2 := x + w, y + h
        inity := y
        tangents := []Tangent{}

        for x <= x2 {
                y = inity
                for y <= y2 {
                        tile := world.getTile(0, x, y)
                        if tile > 0 {
                                tangents = append(tangents, Tangent{x, y, tile})
                        }
                        y++
                }
                x++
        }

        return tangents
}

fn (world: ^World) drawLayer*(pan: th.Vf2, layerId: int) {
        layerId++
        if layerId < 0 || layerId > 2 {
                return
        }
        
        layer := &world.tilemap[layerId]

        for bucket in layer {
                for item in bucket {
                        pos := ChunkPos(item.key)
                        chunk := ^Chunk(item.val)
                        for cx := 0; cx < chunkW; cx++ {
                                for cy := 0; cy < chunkH; cy++ {
                                        tx := cx + pos.x * chunkW
                                        ty := cy + pos.y * chunkH
                                        tileId := chunk[cx][cy]

                                        if tileId > 0 {
                                                pos := tile2Pos(tileId)

                                                world.tileset.crop(th.Vf2{pos.x/4, pos.y/4}, th.Vf2{pos.x/4+1/4.0, pos.y/4+1/4.0})
                                                world.tileset.draw(d_util.posTrans(tx * 32 - pan.x, ty * 32 - pan.y))
                                        }
                                }
                        }

                }
        }
}

fn (world: ^World) draw*(pan: th.Vf2) {
        for i := -1; i < 2; i++ {
                world.drawLayer(pan, i)
        }
}

fn (world: ^World) save*(): str {
        const filename = "scn.csv"
        data := make([][]str, 0)
        // ver
        data = append(data, []str{lastVersion})
        // player pos
        data = append(data, []str{std.itoa(trunc(world.playerSpawnPos.x)), std.itoa(trunc(world.playerSpawnPos.y))})

        // Start from -1, because that's the background layer, which maps to index 0
        layerNo := -1
        for layer in world.tilemap {
                for bucket in layer {
                        for item in bucket {
                                pos := ChunkPos(item.key)
                                chunk := ^Chunk(item.val)
                                data = append(data, []str{std.itoa(pos.x), std.itoa(pos.y), std.itoa(layerNo)})
                                
                                for ty := 0; ty < chunkH; ty++ {
                                        row := make([]str, 0)
                                        for tx := 0; tx < chunkW; tx++ {
                                                row = append(row, std.itoa(chunk[tx][ty]))
                                        }
                                        data = append(data, row)
                                }
                        }
                }
                layerNo++
        }

        return csv.encode(data)
}

fn (world: ^World) load*(data: str) {
        csvData := csv.parse(data)

        world.tilemap = [3]map.Map{map.Map{}, map.Map{}, map.Map{}}

        if csvData[0][0] != lastVersion {
                error("Scene version mismatch")
        }

        world.playerSpawnPos = th.Vf2{real(std.atoi(csvData[1][0])), real(std.atoi(csvData[1][1]))}

        row := 2
        
        // NOTE: I check first column of the csv data because csv parser reports adds bogus row with empty string
        for row < len(csvData) && csvData[row][0] != "" {
                chunkPos := ChunkPos{std.atoi(csvData[row][0]), std.atoi(csvData[row][1])}
                layer := std.atoi(csvData[row][2]) + 1
                row += 1

                if layer < 0 || layer > 2 {
                        continue
                }
                chunk := new(Chunk)
                for y := 0; y < chunkH; y++ {
                        for x := 0; x < chunkW; x++ {
                                tileId := std.atoi(csvData[row+y][x])
                                chunk[x][y] = tileId                          
                        }
                }
                row += chunkH

                world.tilemap[layer].set(chunkPos, chunk)
        }
}

