import ("th.um"; "rect.um"; "canvas.um"; "input.um"; 
  "editor/e_buffer.um";
  "d_rerp.um";
  "d_util.um"; "d_world.um"; "d_dialogs.um"; "d_global.um"; "d_worlddata.um")

const (
  shapeBlock          = 0
  shapeLeftUpSlope    = 1
  shapeRightUpSlope   = 2
  shapeLeftDownSlope  = 3
  shapeRightDownSlope = 4
)

type (
  Shape* = struct {
    rect: rect.Rect
    shape: int
  }

  TagSet* = struct {
    tags: map[str]bool
  }

  Character* = struct {
    id: str
    tags: TagSet
    originalRect: rect.Rect
    rect: rect.Rect
    vel: th.Vf2
    onGround: bool
    onSlope: bool
  }

  SaveState* = struct {
    entities: []Character
    sceneId: int
    world: d_world.World
    chara: Character
    dialogs: d_dialogs.Dialogs
  }
)

fn (t: ^TagSet) set*(tag: str) {
  t.tags[tag] = true
}

fn (t: ^TagSet) isSet*(tag: str): bool {
  return validkey(t.tags, tag) && t.tags[tag]
} 

fn initTagSetFromString*(s: str): TagSet {
  tagSet := TagSet{map[str]bool{}}
  tags := e_buffer.textSplitBy(s, ';')
  for i, tag in tags {
    tagSet.set(tag)
  }

  return tagSet
}

var (
  power, newPower: real
  saveSlot: SaveState
  levers: map[str]bool

  guides: []rect.Rect
  entities*: []Character
  sceneId*: int
  world*: d_world.World
  chara*: Character
  dialogs*: d_dialogs.Dialogs
  camera*: th.Vf2
  cameraScale*: real
)

fn getCameraRect(): rect.Rect {
  return rect.mk(chara.rect.x+chara.rect.w/2-640/2, chara.rect.y+chara.rect.h/2-480/2, 640, 480)
}

fn findGuideInPoint(p: th.Vf2): rect.Rect {
  for i, guide in guides {
    if d_util.rectVsPoint(guide, p) {
      return guide
    }
  }

  return getCameraRect()
}

fn getCameraTargetRect(): rect.Rect {
  guide := findGuideInPoint(chara.rect.getPos())
  cameraRect := getCameraRect()
  scale := d_util.min(guide.w/cameraRect.w, guide.h/cameraRect.h)
  cameraRect.w *= scale
  cameraRect.h *= scale
  // put at center
  cameraRect.x = chara.rect.x+chara.rect.w/2-cameraRect.w/2
  cameraRect.y = chara.rect.y+chara.rect.h/2-cameraRect.h/2


  return d_util.rectKeepInBounds(cameraRect, guide)
}

type CameraProperties = struct {
  pos: th.Vf2
  scale: real
}

fn getCameraProperties*(): CameraProperties {
  targetRect := getCameraTargetRect()
  return CameraProperties{targetRect.getPos(), d_util.min(d_global.screen.w/targetRect.w, d_global.screen.h/targetRect.h)}
}

fn cameraControl() {
  props := getCameraProperties()
  camera = camera.add(props.pos.sub(camera).mulf(th.delta/100.0))
  cameraScale += (props.scale-cameraScale)*(th.delta/100.0)
}

fn cameraOffsetRect(r: rect.Rect): rect.Rect {
  r.x -= camera.x
  r.y -= camera.y
  r.x *= cameraScale
  r.y *= cameraScale
  r.w *= cameraScale
  r.h *= cameraScale
  return r
}

fn playerControl() {
  if input.isPressed(input.key_up) && chara.onGround {
    chara.vel.y = -2.57
  }
  if input.isPressed(input.key_left) {
    chara.vel.x = -2
  }
  if input.isPressed(input.key_right) {
    chara.vel.x = 2
  }

  if chara.rect.y > 2e3 {
    // NOTE: Respawn
    chara.vel.x = 0
    chara.vel.y = 0
    chara.rect.x = world.playerSpawnPos.x * world.tileset.tileSizeX
    chara.rect.y = world.playerSpawnPos.y * world.tileset.tileSizeY
  }
}

fn entPhysics(ent: ^Character) {
  if ent.onSlope {
    ent.vel.y += 0.1
  } else {
    ent.vel.y += 0.1
  }

  if ent.vel.y > 10 {
    ent.vel.y = 10
  }

  ent.rect.x += ent.vel.x
  ent.rect.y += ent.vel.y

  ent.onGround = false
  ent.onSlope = false
  ent.vel.x = 0
}

fn collCalcRectSnap(r, along: rect.Rect): th.Vf2 {
  x_left := r.x + r.w - along.x
  y_up := r.y + r.h - along.y

  x_right := along.x + along.w - r.x
  y_down := along.y + along.h - r.y

  var (min_x: real; min_y: real)

  if fabs(x_left) < fabs(x_right) {
    min_x = -x_left
  } else {
    min_x = x_right
  }

  if fabs(y_up) < fabs(y_down) {
    min_y = -y_up
  } else {
    min_y = y_down
  }

  if fabs(min_x) < fabs(min_y) {
    return th.Vf2{min_x, 0}
  } 
  return th.Vf2{0, min_y}
}

fn collSortShapesByProximity(shapes: ^[]Shape, along: th.Vf2) {
  for i := 0; i < len(shapes^); i++ {
    closest := &shapes[i]
    mindist := real(99999999)
    for j := i; j < len(shapes^); j++ {
      current := shapes[j].rect
      point := th.Vf2{current.x + current.w / 2, current.y + current.h / 2}
      dist := point.distanceTo(along)
      if dist < mindist {
        mindist = dist
        closest = &shapes[j]
      }
    }
    tmp := closest^
    closest^ = shapes[i]
    shapes[i] = tmp
  }
}

fn entVsShape(ent: ^Character, s: Shape) {
  r := s.rect
  snap := collCalcRectSnap(ent.rect, r)
    
  // Not a valid collision (probably pushed back by other blocks?)
  if d_util.rectVsRect(ent.rect, r) == false {
    return
  }
  
  switch s.shape {
  case shapeLeftUpSlope:
    cornerX := ent.rect.x + ent.rect.w - r.x;
    if cornerX > r.w {
      cornerX = r.w
    }
    cornerY := ent.rect.y + ent.rect.h - r.y;
    hitY := r.h - ((r.h/r.w) * (cornerX))
    if hitY > r.h {
      hitY = r.h
    }
    
    if cornerY > hitY {
      ent.vel.y = 0;
      ent.onGround = true;
      ent.onSlope = true;
      ent.rect.y += hitY-cornerY;
    }
  case shapeRightUpSlope:
    cornerX := ent.rect.x - r.x;
    if cornerX < 0 {
      cornerX = 0;
    }
    cornerY := ent.rect.y + ent.rect.h - r.y;
    hitY := (r.h/r.w) * (cornerX)

    if cornerY > hitY {
      ent.vel.y = 0;
      ent.onGround = true;
      ent.onSlope = true;
      ent.rect.y += hitY-cornerY;
    }
  case shapeLeftDownSlope:
    cornerX := ent.rect.x + ent.rect.w - r.x;
    if cornerX > r.w {
      cornerX = r.w
    }
    cornerY := ent.rect.y - r.y;
    hitY := (r.h/r.w) * (cornerX)

    if cornerY < hitY {
      if ent.vel.y < 0 {
        ent.vel.y = 0;
      }
      ent.rect.y += hitY-cornerY;
    }
  case shapeRightDownSlope:
    cornerX := ent.rect.x - r.x;
    if cornerX < 0 {
      cornerX = 0;
    }
    cornerY := ent.rect.y - r.y;
    hitY := r.h - ((r.h/r.w) * (cornerX))

    if cornerY < hitY {
      if ent.vel.y < 0 {
        ent.vel.y = 0;
      }
      ent.rect.y += hitY-cornerY;
    }
  case shapeBlock:
    if snap.x != 0 {
      ent.vel.x = 0
    } else if (snap.y > 0 && ent.vel.y < 0) || (snap.y < 0 && ent.vel.y > 0) {
      ent.vel.y = 0
    }
    if snap.y < 0 {
      ent.onGround = true
    }
    ent.rect.x += snap.x
    ent.rect.y += snap.y
  }
}

fn entConstructColidingSolids(ent: ^Character): []Shape {
  tangents := world.getTangentTiles(rect.Rect{ent.rect.x-1, ent.rect.y-1, ent.rect.w+1, ent.rect.h+1})
  solids := []Shape{}
  nonBlockSolids := []Shape{}

  for i, tangent in tangents {
    shapeRect := rect.Rect{tangent.x*world.tileset.tileSizeX, tangent.y*world.tileset.tileSizeY, world.tileset.tileSizeX, world.tileset.tileSizeY} 
    shapeType := -1

    switch tangent.id {
    case 1, 5, 7:   shapeType = shapeBlock
    case 9:   shapeType = shapeLeftUpSlope
    case 10:  shapeType = shapeRightUpSlope
    case 13:  shapeType = shapeLeftDownSlope
    case 14:  shapeType = shapeRightDownSlope
    case 15:  shapeType = shapeLeftUpSlope
        shapeRect.h /= 2;
    case 16:  shapeType = shapeRightUpSlope
        shapeRect.h /= 2;
    case 4:   shapeType = shapeLeftUpSlope
        shapeRect.y += world.tileset.tileSizeY/2;
        shapeRect.h /= 2;
    case 8:   shapeType = shapeRightUpSlope
        shapeRect.y += world.tileset.tileSizeY/2;
        shapeRect.h /= 2;
    case 11:  shapeType = shapeRightDownSlope
        shapeRect.h /= 2;
    case 12:  shapeType = shapeLeftDownSlope
        shapeRect.h /= 2;
    // TODO: Investigate why uncommenting this causes a bug where you can pass through blocks
    // default:  break
    }
    
    if shapeType == shapeBlock {
      solids = append(solids, Shape{shapeRect, shapeType})
    } else {
      nonBlockSolids = append(nonBlockSolids, Shape{shapeRect, shapeType})
    }
  }


  //collSortShapesByProximity(&nonBlockSolids, th.Vf2{ent.rect.x+ent.rect.w/2, ent.rect.y+ent.rect.h/2})
  solids = append(solids, nonBlockSolids)
  collSortShapesByProximity(&solids, th.Vf2{ent.rect.x+ent.rect.w/2, ent.rect.y+ent.rect.h/2})
  return solids
}

fn entSolveCollision(ent: ^Character) {
  solids := entConstructColidingSolids(ent)

  for i, solid in solids {
    entVsShape(ent, solid)
  }
}

fn _drawRectTangents(r: rect.Rect) {
  solids := entConstructColidingSolids(&chara)

  for i, solid in solids {
    rec := cameraOffsetRect(solid.rect)
    switch solid.shape {
    case shapeBlock:
      canvas.drawRect(0x00FF0055, rec)
    case shapeLeftUpSlope, shapeRightDownSlope:
      canvas.drawLine(0x00FF0055, th.Vf2{rec.x, rec.y+rec.h}, th.Vf2{rec.x+rec.w, rec.y}, 2)
    case shapeRightUpSlope, shapeLeftDownSlope:
      canvas.drawLine(0x00FF0055, th.Vf2{rec.x, rec.y}, th.Vf2{rec.x+rec.w, rec.y+rec.h}, 2)
    }
    canvas.drawText(repr(i), th.Vf2{rec.x, rec.y}, th.white, 1)
  }
}

fn convertEntityDescToCharacter(ent: d_worlddata.EntityDesc): Character {
  return Character{id: ent.id, tags: initTagSetFromString(ent.tags), originalRect: ent.rect, rect: ent.rect}
}

fn loadState() {
  entities = append(saveSlot.entities, []Character{})
  sceneId = saveSlot.sceneId
  world = saveSlot.world
  chara = saveSlot.chara
  dialogs = saveSlot.dialogs
}

fn saveState() {
  saveSlot = SaveState{
    entities: append(entities, []Character{}), 
    sceneId: sceneId,
    world: world,
    chara: chara,
    dialogs: dialogs}
}


fn start*(worldData: d_worlddata.WorldData) {
  levers = map[str]bool{}

  world =  worldData.world

  chara = Character{id: ">>player", rect: rect.Rect{world.playerSpawnPos.x*world.tileset.tileSizeX, world.playerSpawnPos.y*world.tileset.tileSizeY, world.tileset.tileSizeX, world.tileset.tileSizeY}}

  entities = make([]Character, 0)
  guides = make([]rect.Rect, 0)

  for i, ent in worldData.entities {
    chr := convertEntityDescToCharacter(ent)
    if chr.tags.isSet("Guide") {
      guides = append(guides, chr.rect)
    } else {
      entities = append(entities, chr)
    }
  }

  saveState()
}

fn init*() {
  dialogs = d_dialogs.init()
  d_game.dialogs.register("receptionist" , "data/ts03_dialog.png", 0, "data/sp00_receptionist.png", 0, "data/font_mono.ttf", 16, 0xFFFFFFFF, 0.1 , []str{"smirk"})
}

fn updateEntities() {
  entPhysics(&chara)
  entSolveCollision(&chara)

  for i := 0; i < len(entities); i++ {
    // FIXME: Disabled this for now, but later should
    //        make it accessible through flags/tags.
    /*
    entPhysics(&entities[i])
    entSolveCollision(&entities[i])
    */

    ent := &entities[i]

    if ent.tags.isSet("Boulder") {
      boulderTargetRect := d_util.rectMove(ent.originalRect, th.Vf2{0, -ent.originalRect.h*power})
      ent.rect = d_rerp.iRect(ent.rect, boulderTargetRect, th.delta/1000.0*10.0)

      // Resolve player collision
      entShape := Shape{rect: ent.rect}
      entVsShape(&chara, entShape)
    }

    if ent.tags.isSet("Lever") {
      if d_util.rectVsRect(ent.rect, chara.rect) {
        if input.isJustPressed(' ') {
          levers[ent.id] = !levers[ent.id]
        } 
      }

      if levers[ent.id] {
        newPower += 1
      }
    }
  }

  if ok, _ := dialogs.getTopPos(); !ok {
    playerControl()
  }
}

fn drawEntity(ent: ^Character) {
  color := th.blue
  if ent.onGround {
    color = th.red
  }

  if levers[ent.id] {
    color = th.green 
  }

  canvas.drawRect(color, cameraOffsetRect(ent.rect))
}

fn drawEntities() {
  for i := 0; i < len(entities); i++ {
    drawEntity(&entities[i])
  }

  drawEntity(&chara)
}

fn update*() {
  // UPDATE PLAYER & CAMERA //
  updateEntities()
  cameraControl()

  power = newPower
  newPower = 0

  // Load state
  if input.isJustPressed('a') {
    loadState()
  }

  // Save state
  if input.isJustPressed('s') {
    saveState()
  }

  // UPDATE DIALOG //
  dialogs.advance(input.isPressed('x'))

  dialogs.setCamPos(camera)
  dialogs.update()
}

fn drawGuideRects() {
  for i, guide in guides {
    d_util.drawRectLines(th.yellow, cameraOffsetRect(guide))
  }
}

fn draw*() {

  // RENDER WORLD //
  world.drawLayer(camera, -1, cameraScale)
  world.drawLayer(camera, 0, cameraScale)
  drawEntities()
  world.drawLayer(camera, 1, cameraScale)

  // RENDER DIALOG //
  dialogs.draw()

  // DEBUG OVERYALS //
  /*_drawRectTangents(chara.rect)
  drawGuideRects()
  d_util.drawRectLines(th.green, cameraOffsetRect(getCameraTargetRect()))
  */
}
