import (
  "image.um"; "std.um"; "th.um"; "rect.um"; "input.um"; "canvas.um"; "utf8.um"
)

fn posTrans*(x, y: th.fu): th.Transform {
  return th.Transform{p: th.Vf2{x, y}, s: th.Vf2{1, 1}}
}

fn isMouseInRect*(r: rect.Rect): bool {
  p := input.getMousePos()
  return p.x >= r.x && p.y >= r.y && p.x <= (r.x+r.w) && p.y <= (r.y+r.h)
}

fn readFileStr*(path: str): str {
  file := std.fopen(path, "r")
  if file == null {
    error("Failed to open file")
  }
  std.fseek(file, 0, std.seekEnd)
  datasiz := std.ftell(file)
  std.fseek(file, 0, std.seekBegin)
  buffer := make([]uint8, datasiz)
  std.fread(file, buffer)
  data := ""
  
  for i in buffer {
    data += char(buffer[i])
  }
  
  return data
}

fn drawRectLines*(color: uint32, r: rect.Rect) {
  // top
  canvas.drawRect(color, rect.Rect{r.x, r.y, r.w, 1})
  // bottom
  canvas.drawRect(color, rect.Rect{r.x, r.y+r.h-1, r.w, 1})
  // left
  canvas.drawRect(color, rect.Rect{r.x, r.y+1, 1, r.h-1})
  // right
  canvas.drawRect(color, rect.Rect{r.x+r.w-1, r.y+1, 1, r.h-1})
}

fn floor*(n: real): int {
  return trunc(n-int(n < 0 && real(trunc(n)) != n))
}

fn ceil*(n: real): int {
  f := floor(n)
  return f+int(n>f)
}

fn rectChopRight*(r: ^rect.Rect, by: int): rect.Rect {
  r.w -= by
  return rect.Rect{r.x+r.w, r.y, by, r.h}
}

//
// Draws nine-patch rectangle
//
// img: Source image
// outer: Outer rectangle of source
// inner: Inner rectangle of source (Positioned relative to outer)
// dest: Destination rectangle
//
fn drawRectNinepatch*(img: image.Image, outer, inner, dest: rect.Rect, tint: uint32 = th.white) {
  stepSrc := [3]th.Vf2{th.Vf2{inner.x, inner.y}, th.Vf2{inner.w, inner.h}, th.Vf2{outer.w-(inner.x+inner.w), outer.h-(inner.y+inner.h)}}
  stepDst := [3]th.Vf2{th.Vf2{stepSrc[0].x, stepSrc[0].y}, th.Vf2{dest.w-stepSrc[0].x-stepSrc[2].x, dest.h-stepSrc[0].y-stepSrc[2].y}, th.Vf2{stepSrc[2].x, stepSrc[2].y}}

  src := th.Vf2{outer.x, outer.y}
  dst := th.Vf2{dest.x, dest.y}

  imgDims := img.getDims()

  // failsafe
  if imgDims.x == 0 || imgDims.y == 0 {
    return
  }

  for x := 0; x < 3; x++ {
    ssX := stepSrc[x].x
    sdX := stepDst[x].x
    for y := 0; y < 3; y++ {
      ssY := stepSrc[y].y
      sdY := stepDst[y].y

      img.crop(th.Vf2{src.x/imgDims.x, src.y/imgDims.y}, th.Vf2{(src.x+ssX)/imgDims.x, (src.y+ssY)/imgDims.y})
      img.draw(th.Transform{p: th.Vf2{dst.x, dst.y}, s: th.Vf2{sdX/ssX, sdY/ssY}}, tint)

      src.y += ssY
      dst.y += sdY
    }
    src.x += ssX
    dst.x += sdX
    src.y = outer.y
    dst.y = dest.y
  }
}

//
// Crops the input image by specified rectangle in pixels
// 
// img: Input image
// rec: Cropping rectangle, in pixels
//
fn imageCropRect*(img: image.Image, rec: rect.Rect) {
  size := img.getDims()
  img.crop(th.Vf2{rec.x/size.x, rec.y/size.y}, th.Vf2{(rec.x + rec.w)/size.x, (rec.y + rec.h)/size.y})
}

//
// Returns lowest number among a, b
//
fn fmin*(a, b: real): real {
  if a < b {
    return a
  }
  return b
}

//
// Returns highest number among a, b
//
fn fmax*(a, b: real): real {
  if a > b {
    return a
  }
  return b
}

//
// Fmod(
//   Divident
//   Divisor
// )
// 
// floating point modulo
//
fn fmod*(a, b: real): real {
  rem := a / b
  return (rem-floor(rem)) * b
}

// 
// Takes `size` characters (Runes) out of UTF-8 string `s` and returns the slice
// 
// s: Input UTF-8 encoded string
// size: Amount of UTF-8 encoded runes to take
//
fn chopUtf8*(s: str, size: int): str {
  ofs := 0
  for size > 0 && ofs < len(s) {
    rune := utf8.getNextRune(s, ofs)
    ofs += rune.size()
    size -= 1
  }
  return slice(s, 0, ofs)
}

// Rect vs rect(
//   First rect
//   Second rect
// )
//
// Returns true if both rects collide
fn rectVsRect*(r1, r2: rect.Rect): bool {
  return (r1.x + r1.w) > (r2.x) && (r1.y + r1.h) > (r2.y) && (r1.x) < (r2.x + r2.w) && (r1.y) < (r2.y + r2.h)
}

// Rect in point(
//   Rect
//   Point
// )
//
// Returns true if point p is in rectangle r
fn rectInPoint*(r: rect.Rect, p: th.Vf2): bool {
  return p.x > r.x && p.y > r.y && p.x < (r.x + r.w) && p.y < (r.y + r.h)
}

// Rect shrink(
//   Rect,
//   Shrink by
// )
// 
// Returns rectangle shrinked by amount `by` from all left, right, top, bottom sides
fn rectShrink*(r: rect.Rect, by: real): rect.Rect {
  return rect.mk(r.x+by, r.y+by, r.w-by*2, r.h-by*2)
}

// Rect move(
//   Rect,
//   Move by
// ) 
//
// Returns rectangle moved by amount `by`
fn rectMove*(r: rect.Rect, by: th.Vf2): rect.Rect {
  return rect.Rect{r.x+by.x, r.y+by.y, r.w, r.h}
}