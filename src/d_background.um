import (
  "rect.um"; "image.um"; "canvas.um"; "th.um"
  "d_util.um"; "d_global.um"; "d_resources.um"
)

var (
  imgClouds: image.Image
  imgRocks: image.Image
  width: real
)

fn init*(rl: ^d_resources.ResourceLoader) {
  imgClouds = d_resources.loadImage(rl, "data/bg00_sky.png")
  imgRocks = d_resources.loadImage(rl, "data/bg01_pit.png")
  imgRocks.setfilter(0)

  width = imgClouds.getDims().x
}

fn drawCloudStrip(scroll: real, y: real, colorMod: uint32) {
  scroll = d_util.fmod(scroll, -width)

  times := trunc(d_global.screen.w/width)+2

  for i := 0; i < times; i++ {
    imgClouds.draw(d_util.posTrans(scroll+i*width, y), colorMod)
  }
}

fn drawClouds*(screen: rect.Rect) {
  const (
    step = 60
    stripeCount = 5
  )

  origin := d_global.screen.h - 480 - (stripeCount - 1) * step + 120

  width = imgClouds.getDims().x

  canvas.drawRect(0x001133FF, screen) 

  for i := 0; i < stripeCount; i++ {
    yOffset := origin+i*step
    scroll := (i + 1) * (i + 1) * th.time/1000.0 * -120/stripeCount
    color := 0x7777FF00 | (trunc(((i + 1.0) / stripeCount) * 0xFF) & 0xFF)

    drawCloudStrip(scroll, yOffset, color);
  }
}

fn drawCave*(screen: rect.Rect) {
  scale := th.Vf2{d_global.screen.w/screen.w, d_global.screen.h/screen.h}.mulf(0.5)

  step := imgRocks.getDims().mul(scale)
  pos0 := th.Vf2{-16, -16}.mul(step).sub(screen.getPos().divf(4))

  for pos := pos0; pos.x < d_global.screen.w; pos.x += step.x {
    if pos.x + step.x < 0 {continue}
    pos.y = pos0.y
    for pos.y < d_global.screen.h; pos.y += step.y {
      if pos.y + step.y < 0 {continue}
      imgRocks.draw(th.Transform{p: pos, s: scale})    
    }
  } 
}

fn draw*(screen: rect.Rect) {
  drawCave(screen)
}
