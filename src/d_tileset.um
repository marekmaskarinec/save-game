import ("th.um"; "image.um"; "rect.um")

type (
        Tileset* = struct {
                image: image.Image
                tileSizeX, tileSizeY: int
                tileCountX, tileCountY: int
        }
)

fn fromImage*(img: image.Image, tileSizeX, tileSizeY: int): Tileset {
        dims := img.getDims()
        return Tileset{
                image: img,
                tileSizeX: tileSizeX, tileSizeY: tileSizeY,
                tileCountX: trunc(dims.x/tileSizeX), tileCountY: trunc(dims.y/tileSizeY)}
}

fn (ts: ^Tileset) tileToPos*(x, y: int): int {
        return x + ts.tileCountX * y + 1
}

fn (ts: ^Tileset) posToTile*(pos: int): th.Vf2 {
        pos -= 1
        return th.Vf2{pos%ts.tileCountX, pos/ts.tileCountX}
}

fn (ts: ^Tileset) selectTile*(x, y: int) {
        ts.image.crop(th.Vf2{x/real(ts.tileCountX), y/real(ts.tileCountY)},
                      th.Vf2{(x+1)/real(ts.tileCountX), (y+1)/real(ts.tileCountY)})
}

fn (ts: ^Tileset) selectTilePos*(pos: int) {
        pos -= 1
        ts.selectTile(pos%ts.tileCountX, pos/ts.tileCountX)
}

fn (ts: ^Tileset) isTileValid*(pos: int): bool {
        if pos < 1 || pos > (ts.tileCountX*ts.tileCountY) {
                return false
        }
        return true
}
