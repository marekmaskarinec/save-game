import (
  "input.um"
)

type (
  MouseButtonState* = struct {
    isDown: bool
    isPressed: bool
    isReleased: bool
  }

  MouseState* = struct {
    lmb: MouseButtonState
    mmb: MouseButtonState
    rmb: MouseButtonState
    wheelY: real
    mousePos: th.Vf2
    lastMousePos: th.Vf2 
    mouseDelta: th.Vf2 // mousePos - lastMousePos
  }
)

fn (prev: MouseButtonState) update*(button: char): MouseButtonState {
  return MouseButtonState{
    isDown: input.isPressed(button),
    isPressed: input.isJustPressed(button),
    isReleased: input.isReleased(button)
  }
}

fn (prev: MouseButtonState) update*(prev: MouseState): MouseState {
  return MouseState {
    lmb: updateButtonState(prev, input.mouse1),
    mmb: updateButtonState(prev, input.mouse2),
    rmb: updateButtonState(prev, input.mouse3),
    wheelY: real(input.isJustPressed(input.mouse_up)) - real(input.isJustPressed(input.mouse_down)),
    mousePos: input.getMousePos(),
    lastMousePos: prev.mousePos,
    mouseDelta: input.getMousePos().sub(prev.getMousePos())
  }
}