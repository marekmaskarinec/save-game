import (
  "th.um"
  "input.um"
)

type (
  MouseButtonState* = struct {
    isDown: bool
    isPressed: bool
    isReleased: bool
  }

  MouseState* = struct {
    lmb: MouseButtonState
    mmb: MouseButtonState
    rmb: MouseButtonState
    wheelY: real
    pos: th.Vf2
    lastPos: th.Vf2 
    delta: th.Vf2 // mousePos - lastMousePos
  }
)

fn (prev: ^MouseButtonState) updated*(button: char): MouseButtonState {
  return MouseButtonState{
    isDown: input.isPressed(button),
    isPressed: input.isJustPressed(button),
    isReleased: prev.isDown && input.isPressed(button)}
}

fn (prev: ^MouseState) updated*(): MouseState {
  return MouseState {
    lmb: prev.lmb.updated(input.mouse1),
    mmb: prev.mmb.updated(input.mouse2),
    rmb: prev.rmb.updated(input.mouse3), 
    wheelY: real(int(input.isJustPressed(input.mouse_up))) - real(int(input.isJustPressed(input.mouse_down))),
    pos: input.getMousePos(),
    lastPos: prev.pos,
    delta: input.getMousePos().sub(prev.pos)}
}
