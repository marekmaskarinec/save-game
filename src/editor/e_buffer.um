import (
  "utf8.um"
  "../misc/mstrings.um"
)

type Buffer* = struct {
  lines: []str
}

type Cursor* = struct {
  line, column: int
}

/*
// BufferSplitLine()
//
// Splits line at the cursor. Equivalent to inserting a newline.
*/
fn splitLine*(buffer: ^Buffer, cursor: ^Cursor) {
  firstHalf, secondHalf := mstrings.uniSlice(buffer.lines[cursor.line], 0, cursor.column), mstrings.uniSliceFrom(buffer.lines[cursor.line], cursor.column)

  buffer.lines[cursor.line] = firstHalf

  newLines := slice(buffer.lines, 0, cursor.line+1)
  newLines = append(newLines, secondHalf)
  newLines = append(newLines, slice(buffer.lines, cursor.line+1))
  buffer.lines = newLines

  cursor.column = 0
  cursor.line += 1
}

/*
// BufferErase()
//
// Erases character under cursor. If cursor is at the start of the line,
//  it will join the previous line, and line it's currently on.
*/
fn erase*(buffer: ^Buffer, cursor: ^Cursor) {
  cursor.column -= 1
  if cursor.column < 0 {
    // Join lines strategy.
    cursor.line -= 1
    if cursor.line >= 0 {
      cursor.column = utf8.realLength(buffer.lines[cursor.line])
      buffer.lines[cursor.line] += buffer.lines[cursor.line+1]
      buffer.lines = delete(buffer.lines, cursor.line+1)
    } else {
      cursor.column = 0
      cursor.line = 0
    }
  } else {
    // Remove char strategy.
    buffer.lines[cursor.line] = mstrings.uniRemove(buffer.lines[cursor.line], cursor.column, 1)
  }
}

/*
// BufferInsert()
//
// Inserts provided text into buffer. 
*/
fn insertAt*(buffer: ^Buffer, cursor: ^Cursor, text: str) {
  linesToInsert := mstrings.splitBy(text, '\n')
  for index, line in linesToInsert {
    // Reset the column if we're on a new line.
    if index != 0 { 
      splitLine(buffer, cursor)
    }
    buffer.lines[cursor.line] = mstrings.uniInsert(buffer.lines[cursor.line], cursor.column, line)
    cursor.column += utf8.realLength(line)
  }
}

/*
// BufferSanitizeCursor()
//
// Sanitizes the `cursor` so it doesn't go outside bounds of `buffer`.
*/
fn sanitizeCursor*(buffer: ^Buffer, cursor: Cursor): Cursor {
  if cursor.line < 0 {
    cursor.line = 0
  }
  if cursor.line > len(buffer.lines)-1 {
    cursor.line = len(buffer.lines)-1
  }

  realLength := utf8.realLength(buffer.lines[cursor.line])
  
  if cursor.column < 0 {
    cursor.column = 0
  }
  for cursor.column > realLength {
    cursor.column = realLength
  }
  
  return cursor
}

/*
// BufferMoveCursor()
//
// Moves cursor within buffer by dx columns, dy rows.
//  rows grow downwards.
*/
fn moveCursor*(buffer: ^Buffer, cursor: Cursor, dx, dy: int): Cursor {
  cursor.line += dy

  cursor = sanitizeCursor(buffer, cursor)

  if dx < 0 {
    for dx != 0 {
      dx += 1

      if cursor.column == 0 {
        cursor.line -= 1
        if cursor.line > 0 {
          cursor.column = utf8.realLength(buffer.lines[cursor.line])
        } else {
          cursor.line = 0
        }
      } else {
        cursor.column -= 1
      }
    }
  } else {
    for dx != 0 {
      dx -= 1

      if cursor.column == utf8.realLength(buffer.lines[cursor.line]) {
        if cursor.line < len(buffer.lines)-1 {
          cursor.column = 0
          cursor.line += 1
        }
      } else {
        cursor.column += 1
      }
    }
  }

  return cursor
}

